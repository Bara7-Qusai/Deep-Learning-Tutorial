# -*- coding: utf-8 -*-
"""Weights to Combine Similarities.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1euZi6FQysgEtyTUQtwWedjpdn4gXnELI

#استدعاء المكتبات
"""

import numpy as np
import pandas as pd

"""# بيانات شخصين
لكل شخص 3 سمات العمر وسنوات الخبرة وعدد المشاريع المكتملة
"""

data = pd.DataFrame({
    'Age': [25, 30],
    'Experience': [3, 5],
    'Projects': [10, 12]
}, index=['Person1', 'Person2'])

data

"""#weights&deltas"""

# الأوزان لكل feature
weights = np.array([0.3, 0.5, 0.2]) # تدل على الأهمية النسبية

# دلتا: 1 إذا كانت القيمة موجودة (كلها موجودة هنا)
deltas = np.array([1, 1, 1])

"""# دالة s_k


*   تحسب التشابه بين قيمتين (x و y) لميزة واحدة
*   إذا كانت القيم متساوية → s_k = 1
*  إذا كانت مختلفة تمامًا → s_k → 0
"""

def s_k(x, y):
    max_val = max(x, y)
    if max_val == 0:
        return 1.0
    return 1 - abs(x - y) / max_val

"""#دالة similarity:
* تحسب التشابه العام بين شخصين عبر جميع الميزات
*    تجمع التشابهات الجزئية  لكل ميزة، وتضربها بالوزن والدلتا
*القسمة على مجموع الأوزان (المرجحة بالدلتا) تعطي النتيجة النهائية




"""

def similarity(x, y, weights, deltas):
    sims = np.array([s_k(x[i], y[i]) for i in range(len(x))])
    numerator = np.sum(weights * deltas * sims)
    denominator = np.sum(weights * deltas)
    return numerator / denominator if denominator != 0 else 0

"""## استخراج البيانات كقوائم  """

x = data.loc['Person1'].values
y = data.loc['Person2'].values
print(x,y)

"""# حساب التشابه"""

score = similarity(x, y, weights, deltas)
print(f"Similarity score between Person1 and Person2: {score:.4f}")